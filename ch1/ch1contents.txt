K&R - The C programming Language
chapter 2 book exercises: (bookexercises/)

Exercise 1-1.  Run the "hello, world" program on your system.  Experiment with leaving out parts of the program, to see what error messages you get.
Progress:
Finished - (bookexercises/exercise1-1/) contains exercise1-1 and permutations.  The permutations are inspired by the error and warning messages gcc gave me while attempting to compile.
Notes:
Using gcc version 4.6.1 (Ubuntu/Linaro 4.6.1-9ubuntu3) 
Complied with command: gcc -Wall -c "%f"
It was really very interesting to see what is acceptable to gcc, and what it asks for when lines are unnacceptable.  Especially by doing 'bogus debugging' - acting on suggestions from compiler error and warning messages in a way that you know will be unnacceptable - one can start to get a feel for how the complier 'sees' a program.


Exercise 1-2.  Experiment to find out what happens when prints's argument string contains \c, where c is some character not listed above.
Progress:
Finished
Notes:
Prints the escape sequences from section 2.3 and one unknown escape sequence.

Exercise 1-3.  Modify the termperature conversion program to print a heading above the table.
Progress:
Complete

Exercise 1-4.  Write a program to print the corresponding Celsius to Fahrenheit table.
Progress:
Complete

Exercise 1-5.  Modify the termperature conversion program to print the table in reverse order, that is, from 300 degrees to 0.
Progress:
Complete

Exercise 1-6.  Verify that the expression getchar() != EOF is 0 or 1.
Progress:
Complete
Notes:
This program is an infinite loop that takes characters from the std. input and prints a 0 for an EOF character, and 1 for every other character.  
 * Note: Must use ^c or kill to terminate *

Exercise 1-7.  Write a program to print the value of EOF.
Progress:
Complete

Exercise 1-8.  Write a program to count blanks, tabs, and newlines.
Progress:
Complete
Notes: I wanted to understand why my exercise1-8.c only prints to output once EOF is reached, while my exercise1-9.c prints to output after every newline character is input, so I created exercise1-8_v1.c that also copies its input to output.  I believe the printing of output on receiving a newline is related to the terminal's behavior rather than something specific to the c language.

Exercise 1-9.  Write a program to copy its input to its output, replacing each string of one or more blanks by a single blank.
Progress:
Complete

Exercise 1-10.  Write a program to copy its input to its output, replacing each tab by \t, each backspace by \b, and each backslash by \\.  This makes tabs and backspaces visible in an unambiguous way.
Progress:
Complete

Exercise 1-11.  How would you test the word count program?  What kinds of input are the most likely to uncover bugs if there are any?
Progress:
Complete
Notes:
Files of the naming convention wctest*.in are intended to be passed to exercise1-11.c, exercise1-11_v1.c and exercise 1-11_v2.c as input.  Both variations of exercise1-11.c are intended to highlight how the wc program handles unexpected input.

Exercise 1-12.  Write a program that prints its input one word per line.

Exercise 1-13.  Write a program to print a histogram of the lengths of words in its input.  It is easy to draw the histogram with the bars horizontal; a vertical orientation is more challenging.

Exercise 1-14.  Write a program to print a histogram of the frequencies of different characters in its input.

Exercise 1-15.  Rewrite the temperature conversion program of Section 1.2 to use a function for conversion.

Exercise 1-16.  Revise the main routine of the longest-line program so it will correctly print the length of arbitrary long input lines, and as much as possible of the text.

Exercise 1-17.  Write a program to print all input lines that are longer than 80 characters.

Exercise 1-18.  Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.

Exercise 1-19.  Write a function reverse(s) that reverses the character string s.  Use it to write a program that reverses its input a line at a time.

Exercise 1-20.  Write a program detab that replaces tabs in the input with the proper number of blanks to space to the next tab stop.  Assume a fixed set of tab stops, say every n columns.  Should n be a variable or a symbolic parameter?

Exercise 1-21.  Write a program entab that replaces strings of blanks byt the minimum number of tabs and blanks to achieve the same spacing.  Use the same tab stops as for detab.  When either a tab or a single blank would suffice to reach a tab stop, which should be given preference?

Exercise 1-22.  Write a program to "fold" long input lines into two or more shorter lines after the last non-blank character that occurs before the n-th column of input.  Make sure your program does something intelligent with very long lines, and if there are no blanks or tabs before the specified column.

Exercise 1-23.  Write a program to remove all comments from a C program.  Don't forget to handle quoted strings and character constants properly.  C comments don't nest.

Exercise 1-24.  Write a program to check a C program for rudimentary syntax errors like unmatched parentheses, brackets and braces.  Don't forget about quotes, both single and double, escape sequences, and comments. (This program is hard if you do it in full generality.)


Personal Exercises:

exercise1-8_v1.c - Reads from std. input, copies input to output and counts blanks, tabs, and newlines, then prints the results.
Purpose: 
I wanted to understand why my exercise1-8.c only prints to output once EOF is reached, while my exercise1-9.c prints to output after every newline character is input, so I created exercise1-8_v1.c that also copies its input to output.  I believe the printing of output on receiving a newline is related to the terminal's behavior rather than something specific to the c language.
Conclusion:
When using getchar() in a loop, the first character is only recieved after it is sent from the standard input, so in the case of running exercise1-8.c or exercise1-9.c with standard input from the terminal, the program only 'sees' input once the first newline is entered on the terminal, and is otherwise 'waiting' at the test condition at the top of the loop.  So, a program like exercise1-8.c is really tallying the target characters as it recieves each new line of input, and since it has not recieved an EOF, it waits for the next input.  A program like exercise1-9 is also 'waiting' for input, but as it recieves the new line, the program goes through the loop until input is EOF or it is 'waiting' for input again, and on each iteration prints the current character, effectively printing the whole line, \n and all, before it is 'waiting' again.  This also explains why entering characters at the terminal and then giving a single ^d before typing a newline character will mirror the input to the output without advancing the standard output to a new line; ^d sends the input to the program from the terminal, and then the output is immediatly sent and displayed on the standard output, and the program continues to 'wait' for input because it did not recieve an EOF character - only the terminal recieved an EOF character.  Therefore, entering ^d again or at the beginning of new input will end the program because this causes the terminal to send an EOF character to the c program and the program at last 'sees' the EOF character, effectively falsifying the loop condition and then reaching the end of the program.  Truly, the question I should have asked is not 'why does exercise1-9 print output after recieving a newline character' but instead, 'why do I not print character tallying information from exercise1-8 until I am done with the loop that takes characters from the standard input'.

exercise1-11_v1.c - the wc program modified to copy its input to its output.  This makes it easier to see the results of unexpected input.
Purpose:
To show what happens to the stream of text in files wctest5.in through wctest8.in when processed by exercise1-11.c

exercise1-11_v2.c - the wc program modified to copy its input to its output, and to exhibit some intelligent behavior when given a backspace character in input.  The solution below may still have some bugs, as wctest5.in produces a negative character count as output, which may or may not be unexpected or undesired behavior depending on what you are using wc for.
Purpose:
To demonstrate how a program like exercise1-11.c can be modified to handle new kinds of input that may have been producing unexpected or undesired behavior in the original program.

