K&R - The C programming Language
chapter 3 book exercises: (bookexercises/)

Exercise 3-1.  Our binary search makes two tests inside the loop, when one would suffice (at the price of more tests outside.)  Write a version with only one test inside the loop and measure the difference in run-time.
Progress:
Incomplete
-my modified algorithm works for both cases (target in the search set, and target not in the search set)
-my textbook algorithm does not terminate in some cases in which the target value is not in the search set.  Two such known cases are when v[0] < x < v[1] and when v[n/2] < x < v[(n/2)+1)].
-my bash script (./runtimetest.sh) works, but only prints results of the 'time' bash command for each trial, and does not yet aggregate and analyze the data across trials.
NOTES:
Included is a script (./runtimetest.sh) that will prompt the user for the number of time trials to run, and then display the results for both exercise3-1.c and exercise3-1_vtextbook.c in the same output.

Exercise 3-2.  Write a function escape(s,t) that converts characters like newline and tab into visible escape sequences like \n and \t as it copies the string t to s.  Use a switch.  Write a function for the other direction as well, converting escape sequences into the real characters.
Progress:
Complete
NOTE: use test_escape.in found in the exercise3-2 folder to test exercise3-2_escape.c, and see that all of the control characters have been transformed into their escape sequences.  Then you can use the resulting file to test exercise3-2_deescape.c, and verify that the result of deescape() is identical to test_escape.in.

Exercise 3-3.  Write a function expand(s1,s2) that expands shorthand notations like a-z in the string s1 into the equivalent complete list abc...xyz in s2.  Allow for letter of either case and digits, and be prepared to handle cases like a-b-c and a-z0-9 and -a-z.  Arrange that a leading or trailing - is taken literally.
Progress:
Complete
NOTE:
This program could be modified to allow for series of expansions, as in a-c-e-g-i, for example.  Currently -a-z and a-z- do not expand.


Personal Exercises:

shellprint.c - a simple program to output the result of each operation of the shellsort algorithm on an array
