K&R - The C programming Language
chapter 2 book exercises: (/bookexercises/)

Exercise 2-1.  Write a program to determine the ranges of char, short, int, and long variables, both signed and unsigned, by printing appropriate values from standard headers and by direct computation.  Harder if you compute them: determine the ranges of the various floating point types.
Progress:
sucessful: -print basic int data type limits from limits.h and by computation
to do: -compute and list limits of floating-point types.
Credits:
Earlier, I didn't give proper credit for the ideas I used in this program.  User Name:'s post on http://cboard.cprogramming.com/c-programming/127683-computing-max-min-values-numeric-variables-ints-chars-etc.html was the first method I used to approach this problem, and was very important for me to get my start.

Exercise 2-2.  Write a loop equivalent to the for loop above without using && or ||.
Progress:

Exercise 2-3.  Write a function htoi(s), which converts a string of hexadecimal digits (including an optional 0x or 0X) into its equivalent integer value.  The allowable digits are 0 through 9, a through f, and A through F.
Progress:
Finished.

Exercise 2-4.  Write an alternative version of squeeze(s1,s2) that deletes each character in s1 that matches any character in the string s2.
Progress:
Complete.

Exercise 2-5.  Write the function any(s1, s2), which returns the first location in a string s1 where any character from the string s2 occurs, or -1 if s1 contains no characters from s2. (The standard library function strpbrk does the same job but returns a pointer to the location.)
NOTE:
When testing this program, you must use ^d with no newline character to pass the second line from the terminal to the program, or else you will always match the newline character in the first line with the newline character from the second, and never recieve a value of -1 for no match.
Progress:
Complete.

Exercise 2-6.  Write a function setbits(x,p,n,y) that returns x with the n bits that begin at position p set to the rightmost n bits of y, leaving the other bits unchanged.
Progress:
Complete
NOTE:
This implementation begs a more elegant solution.

Exercise 2-7.  Write a function invert(x,p,n) that returns x with the n bits that begin at position p set to the rightmost n bits of y, leaving the other bits unchanged.
Progress:
Complete

Exercise 2-8.  Write a function rightrot(x,n) that returns the value of the integer x rotated to the right by n positions.


Personal Exercises:

fastintrange.c - a fast algorithm for directly computing limits of basic integer data types 
Purpose:
To find a method faster than adding one to compute the integer ranges.  Especially the unsigned long long, which is 64 bit on my machine and has never finished using the incremental method ^_^.  I am also hope these kinds of ideas will be applicable to computing the floating point ranges as well.
Conclusion:
This method is very fast, and takes advantage of the way the machine represents these numbers to itself.  In fact, I learned a lot about manipulating numbers in various bases.

recursiveadditionratios.c - a simple program that asks the user for two initial values, and creates a recursively additive sequence where each term in the series is the sum of the two terms that preceeded it, like the Fibonacci and Lucas sequences.  For each term in the created series, the index is printed, along with the previous two terms, and the ratio of those two numbers.  This program is suitable for demonstrating the convergence of the ratios between successive terms in a recursively additive sequence, and the speed at which this convergence occurs.  To create the Fibonacci sequence enter 1 and then 1 as the initial terms, and to create the Lucas sequence enter 3 and then 1.
Purpose:
To demonstrate some of the properties of recursively additive sequences.
Conclusion:
These properties can be demonstrated easily, and if you vary the precision of the floating point calculation, you can observe the behavior of floation point numbers of different sizes.

rshiftwordlengthtest.c - a program that implements numuintbits(), a function that returns the number of bits in an unsigned int
Purpose:
to find a way to find a way not to assume the word length of an integer in function rightrot(x, n) in exercise2-8
Conclusion:
I haven't yet found a way to find the number of bits in an integer at runtime that doesen't involve a test variable and a loop, but the solution demonstrated by this program is very simple and efficient, though it uses a variable and loop.  This program also inspires a more efficient method to find the range of integer types than I proposed in fastintrange.c 

